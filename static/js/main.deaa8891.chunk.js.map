{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["giphyFetch","GiphyFetch","randomInteger","min","max","Math","floor","random","GridDemo","useState","window","innerWidth","width","setWidth","fetchGifs","offset","search","limit","columns","gutter","onResize","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4NAOMA,EAAa,IAAIC,aAAW,oCAElC,SAASC,IAAgC,IAAlBC,EAAiB,uDAAb,EAAGC,EAAU,uDAAN,IAChC,OAAOC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,IAAMA,EAIvD,SAASK,IACP,IADkB,EAGQC,mBAASC,OAAOC,YAHxB,mBAGXC,EAHW,KAGJC,EAHI,KAIlB,OACE,qCACE,cAAC,OAAD,CACEC,UANY,SAACC,GAAD,OAChBf,EAAWgB,OAAO,6BAA8B,CAAED,OAAQb,EAAca,GAASE,MAAO,KAMpFL,MAAOA,EACPM,QAAS,EACTC,OAAQ,IAEV,cAAC,IAAD,CACEC,SAAU,YAAgB,IAAbR,EAAY,EAAZA,MACXC,EAASD,SAsBJS,MATf,WACE,OACE,sBAAKC,UAAU,MAAf,UACE,+CACA,cAACd,EAAD,QC/BSe,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.deaa8891.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\nimport { GiphyFetch } from \"@giphy/js-fetch-api\";\nimport { Carousel } from \"@giphy/react-components\";\nimport { Grid } from \"@giphy/react-components\";\nimport ResizeObserver from \"react-resize-observer\";\n\nconst giphyFetch = new GiphyFetch(\"sXpGFDGZs0Dv1mmNFvYaGUvYwKX0PWIh\");\n\nfunction randomInteger(min=0, max=1000) {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\n// @ts-ignore\nfunction GridDemo() {\n  const fetchGifs = (offset: number) =>\n    giphyFetch.search(\"technology xero github git\", { offset: randomInteger(offset), limit: 5 });\n  const [width, setWidth] = useState(window.innerWidth);\n  return (\n    <>\n      <Grid\n        fetchGifs={fetchGifs}\n        width={width}\n        columns={3}\n        gutter={6}\n      />\n      <ResizeObserver\n        onResize={({ width }) => {\n          setWidth(width);\n        }}\n      />\n    </>\n  );\n}\n\nfunction CarouselDemo() {\n  const fetchGifs = () =>\n    giphyFetch.search(\"technology xero github git\", { offset: randomInteger(), limit: 5 });\n  return <Carousel fetchGifs={fetchGifs} gifHeight={200} gutter={6} />;\n}\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h4>Random PR Gif</h4>\n      <GridDemo />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}