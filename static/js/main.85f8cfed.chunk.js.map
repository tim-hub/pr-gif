{"version":3,"sources":["GifGrid.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["giphyFetch","GiphyFetch","randomInteger","min","max","Math","floor","random","GifGrid","useState","window","innerWidth","width","setWidth","position","autoClose","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnFocusLoss","draggable","pauseOnHover","fetchGifs","offset","search","limit","columns","gutter","noLink","borderRadius","onGifClick","gif","e","theUrl","images","original","url","navigator","clipboard","writeText","toast","progress","undefined","onResize","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0OASMA,EAAa,IAAIC,aAAW,oCAElC,SAASC,IAAoC,IAAtBC,EAAqB,uDAAf,EAAGC,EAAY,uDAAN,IACpC,OAAOC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,IAAMA,EAIhD,IAAMK,EAAU,WACrB,IAD2B,EAGDC,mBAASC,OAAOC,YAHf,mBAGpBC,EAHoB,KAGbC,EAHa,KAI3B,OACE,qCACE,cAAC,IAAD,CACEC,SAAS,aACTC,UAAW,IACXC,iBAAiB,EACjBC,aAAa,EACbC,cAAY,EACZC,KAAK,EACLC,kBAAgB,EAChBC,WAAS,EACTC,cAAY,IAEd,cAAC,OAAD,CACEC,UAjBY,SAACC,GAAD,OAChBxB,EAAWyB,OAAO,6BAA8B,CAACD,OAAQtB,EAAcsB,GAASE,MAAO,KAiBnFd,MAAOA,EACPe,QAAS,EACTC,OAAQ,EACRC,QAAQ,EACRC,aAAc,EACdC,WAAY,SAACC,EAAWC,GACtB,IAAMC,EAASF,EAAIG,OAAOC,SAASC,IACnCC,UAAUC,UAAUC,UAAUN,GAC9BO,YAAM,+BAAsB,CAC1B3B,SAAU,aACVC,UAAW,IACXC,iBAAiB,EACjBE,cAAc,EACdI,cAAc,EACdD,WAAW,EACXqB,cAAUC,OAIhB,cAAC,IAAD,CACEC,SAAU,YAAc,IAAZhC,EAAW,EAAXA,MACVC,EAASD,UCxCJiC,MAVf,WACE,OACE,sBAAKC,UAAU,MAAf,UACE,+CACA,gFACA,cAAC,EAAD,QCGSC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.85f8cfed.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\nimport { GiphyFetch } from \"@giphy/js-fetch-api\";\nimport { Grid } from \"@giphy/react-components\";\nimport ResizeObserver from \"react-resize-observer\";\nimport { IGif } from '@giphy/js-types';\nimport { toast, ToastContainer } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nconst giphyFetch = new GiphyFetch(\"sXpGFDGZs0Dv1mmNFvYaGUvYwKX0PWIh\");\n\nfunction randomInteger(min = 0, max = 1000) {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\n// @ts-ignore\nexport const GifGrid = () => {\n  const fetchGifs = (offset: number) =>\n    giphyFetch.search(\"technology xero github git\", {offset: randomInteger(offset), limit: 5});\n  const [width, setWidth] = useState(window.innerWidth);\n  return (\n    <>\n      <ToastContainer\n        position=\"top-center\"\n        autoClose={5000}\n        hideProgressBar={false}\n        newestOnTop={false}\n        closeOnClick\n        rtl={false}\n        pauseOnFocusLoss\n        draggable\n        pauseOnHover\n      />\n      <Grid\n        fetchGifs={fetchGifs}\n        width={width}\n        columns={3}\n        gutter={6}\n        noLink={true}\n        borderRadius={2}\n        onGifClick={(gif: IGif, e: any) => {\n          const theUrl = gif.images.original.url;\n          navigator.clipboard.writeText(theUrl);\n          toast('ðŸ¦„ Gif Url Copied!', {\n            position: \"top-center\",\n            autoClose: 2000,\n            hideProgressBar: false,\n            closeOnClick: true,\n            pauseOnHover: true,\n            draggable: true,\n            progress: undefined,\n          });\n        }}\n      />\n      <ResizeObserver\n        onResize={({width}) => {\n          setWidth(width);\n        }}\n      />\n    </>\n  );\n}\n","import React, { useState } from 'react';\nimport './App.css';\nimport {GifGrid} from './GifGrid';\nimport 'react-toastify/dist/ReactToastify.css';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h3>Random PR Gif</h3>\n      <p>Click the picture to copy Gif Url to clipboard!</p>\n      <GifGrid/>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}